01:
Utilizar a classe ResponseEntity, do Spring, para personalizar os retornos dos métodos de uma classe Controller;

Modificar o código HTTP devolvido nas respostas da API;

Adicionar cabeçalhos nas respostas da API;

Utilizar os códigos HTTP mais apropriados para cada operação realizada na API.

02:
Criar uma classe para isolar o tratamento de exceptions da API, com a utilização da anotação @RestControllerAdvice;

Utilizar a anotação @ExceptionHandler, do Spring, para indicar qual exception um determinado método da classe de tratamento de erros deve capturar;

Tratar erros do tipo 404 (Not Found) na classe de tratamento de erros;

Tratar erros do tipo 400 (Bad Request), para erros de validação do Bean Validation, na classe de tratamento de erros;

Simplificar o JSON devolvido pela API em casos de erro de validação do Bean Validation.

03:

Funcionamento do processo de autenticação e autorização em uma API Rest;

Como adicionar o Spring Security ao projeto;

Como funciona o comportamento padrão do Spring Security em uma aplicação;

Como implementar o processo de autenticação na API, de maneira Stateless, utilizando as classes e configurações do Spring Security.

04:

Adicionar a biblioteca Auth0 java-jwt como dependência do projeto;

Utilizar essa biblioteca para realizar a geração de um token na API;

Injetar uma propriedade do arquivo application.properties em uma classe gerenciada pelo Spring, utilizando a anotação @Value;

Devolver um token gerado na API quando um usuário se autenticar nela.

05:
Funcionam os Filters em uma requisição;

Implementar um filter criando uma classe que herda da classe OncePerRequestFilter, do Spring;

Utilizar a biblioteca Auth0 java-jwt para realizar a validação dos tokens recebidos na API;

Realizar o processo de autenticação da requisição, utilizando a classe SecurityContextHolder, do Spring;

Liberar e restringir requisições, de acordo com a URL e o verbo do protocolo HTTP.